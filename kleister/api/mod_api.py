# coding: utf-8

"""
    Kleister OpenAPI

    API definition for Kleister, manage mod packs for Minecraft  # noqa: E501

    The version of the OpenAPI document: 1.0.0-alpha1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from kleister.api_client import ApiClient
from kleister.exceptions import (
    ApiTypeError,
    ApiValueError
)


class ModApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def append_mod_to_team(self, mod_id, params, **kwargs):  # noqa: E501
        """Assign a team to mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.append_mod_to_team(mod_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param ModTeamParams params: The mod team data to assign (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.append_mod_to_team_with_http_info(mod_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.append_mod_to_team_with_http_info(mod_id, params, **kwargs)  # noqa: E501
            return data

    def append_mod_to_team_with_http_info(self, mod_id, params, **kwargs):  # noqa: E501
        """Assign a team to mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.append_mod_to_team_with_http_info(mod_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param ModTeamParams params: The mod team data to assign (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mod_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method append_mod_to_team" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mod_id' is set
        if ('mod_id' not in local_var_params or
                local_var_params['mod_id'] is None):
            raise ApiValueError("Missing the required parameter `mod_id` when calling `append_mod_to_team`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `append_mod_to_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mod_id' in local_var_params:
            path_params['mod_id'] = local_var_params['mod_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mods/{mod_id}/teams', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def append_mod_to_user(self, mod_id, params, **kwargs):  # noqa: E501
        """Assign a user to mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.append_mod_to_user(mod_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param ModUserParams params: The mod user data to assign (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.append_mod_to_user_with_http_info(mod_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.append_mod_to_user_with_http_info(mod_id, params, **kwargs)  # noqa: E501
            return data

    def append_mod_to_user_with_http_info(self, mod_id, params, **kwargs):  # noqa: E501
        """Assign a user to mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.append_mod_to_user_with_http_info(mod_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param ModUserParams params: The mod user data to assign (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mod_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method append_mod_to_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mod_id' is set
        if ('mod_id' not in local_var_params or
                local_var_params['mod_id'] is None):
            raise ApiValueError("Missing the required parameter `mod_id` when calling `append_mod_to_user`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `append_mod_to_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mod_id' in local_var_params:
            path_params['mod_id'] = local_var_params['mod_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mods/{mod_id}/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def append_version_to_build(self, mod_id, version_id, params, **kwargs):  # noqa: E501
        """Assign a build to a version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.append_version_to_build(mod_id, version_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param str version_id: A version UUID or slug (required)
        :param VersionBuildParams params: The build data to append to version (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.append_version_to_build_with_http_info(mod_id, version_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.append_version_to_build_with_http_info(mod_id, version_id, params, **kwargs)  # noqa: E501
            return data

    def append_version_to_build_with_http_info(self, mod_id, version_id, params, **kwargs):  # noqa: E501
        """Assign a build to a version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.append_version_to_build_with_http_info(mod_id, version_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param str version_id: A version UUID or slug (required)
        :param VersionBuildParams params: The build data to append to version (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mod_id', 'version_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method append_version_to_build" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mod_id' is set
        if ('mod_id' not in local_var_params or
                local_var_params['mod_id'] is None):
            raise ApiValueError("Missing the required parameter `mod_id` when calling `append_version_to_build`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if ('version_id' not in local_var_params or
                local_var_params['version_id'] is None):
            raise ApiValueError("Missing the required parameter `version_id` when calling `append_version_to_build`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `append_version_to_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mod_id' in local_var_params:
            path_params['mod_id'] = local_var_params['mod_id']  # noqa: E501
        if 'version_id' in local_var_params:
            path_params['version_id'] = local_var_params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mods/{mod_id}/versions/{version_id}/builds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_mod(self, params, **kwargs):  # noqa: E501
        """Create a new mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_mod(params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Mod params: The mod data to create (required)
        :return: Mod
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_mod_with_http_info(params, **kwargs)  # noqa: E501
        else:
            (data) = self.create_mod_with_http_info(params, **kwargs)  # noqa: E501
            return data

    def create_mod_with_http_info(self, params, **kwargs):  # noqa: E501
        """Create a new mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_mod_with_http_info(params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Mod params: The mod data to create (required)
        :return: Mod
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_mod" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `create_mod`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mods', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mod',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_version(self, mod_id, params, **kwargs):  # noqa: E501
        """Create a new version for a mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_version(mod_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param Version params: The version data to create (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_version_with_http_info(mod_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.create_version_with_http_info(mod_id, params, **kwargs)  # noqa: E501
            return data

    def create_version_with_http_info(self, mod_id, params, **kwargs):  # noqa: E501
        """Create a new version for a mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_version_with_http_info(mod_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param Version params: The version data to create (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mod_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_version" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mod_id' is set
        if ('mod_id' not in local_var_params or
                local_var_params['mod_id'] is None):
            raise ApiValueError("Missing the required parameter `mod_id` when calling `create_version`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `create_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mod_id' in local_var_params:
            path_params['mod_id'] = local_var_params['mod_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mods/{mod_id}/versions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Version',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_mod(self, mod_id, **kwargs):  # noqa: E501
        """Delete a specific mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_mod(mod_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_mod_with_http_info(mod_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_mod_with_http_info(mod_id, **kwargs)  # noqa: E501
            return data

    def delete_mod_with_http_info(self, mod_id, **kwargs):  # noqa: E501
        """Delete a specific mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_mod_with_http_info(mod_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mod_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_mod" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mod_id' is set
        if ('mod_id' not in local_var_params or
                local_var_params['mod_id'] is None):
            raise ApiValueError("Missing the required parameter `mod_id` when calling `delete_mod`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mod_id' in local_var_params:
            path_params['mod_id'] = local_var_params['mod_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mods/{mod_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_mod_from_team(self, mod_id, params, **kwargs):  # noqa: E501
        """Remove a team from mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_mod_from_team(mod_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param ModTeamParams params: The mod team data to delete (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_mod_from_team_with_http_info(mod_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_mod_from_team_with_http_info(mod_id, params, **kwargs)  # noqa: E501
            return data

    def delete_mod_from_team_with_http_info(self, mod_id, params, **kwargs):  # noqa: E501
        """Remove a team from mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_mod_from_team_with_http_info(mod_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param ModTeamParams params: The mod team data to delete (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mod_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_mod_from_team" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mod_id' is set
        if ('mod_id' not in local_var_params or
                local_var_params['mod_id'] is None):
            raise ApiValueError("Missing the required parameter `mod_id` when calling `delete_mod_from_team`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `delete_mod_from_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mod_id' in local_var_params:
            path_params['mod_id'] = local_var_params['mod_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mods/{mod_id}/teams', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_mod_from_user(self, mod_id, params, **kwargs):  # noqa: E501
        """Remove a user from mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_mod_from_user(mod_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param ModUserParams params: The mod user data to delete (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_mod_from_user_with_http_info(mod_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_mod_from_user_with_http_info(mod_id, params, **kwargs)  # noqa: E501
            return data

    def delete_mod_from_user_with_http_info(self, mod_id, params, **kwargs):  # noqa: E501
        """Remove a user from mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_mod_from_user_with_http_info(mod_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param ModUserParams params: The mod user data to delete (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mod_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_mod_from_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mod_id' is set
        if ('mod_id' not in local_var_params or
                local_var_params['mod_id'] is None):
            raise ApiValueError("Missing the required parameter `mod_id` when calling `delete_mod_from_user`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `delete_mod_from_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mod_id' in local_var_params:
            path_params['mod_id'] = local_var_params['mod_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mods/{mod_id}/users', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_version(self, mod_id, version_id, **kwargs):  # noqa: E501
        """Delete a specific version for a mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_version(mod_id, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param str version_id: A version UUID or slug (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_version_with_http_info(mod_id, version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_version_with_http_info(mod_id, version_id, **kwargs)  # noqa: E501
            return data

    def delete_version_with_http_info(self, mod_id, version_id, **kwargs):  # noqa: E501
        """Delete a specific version for a mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_version_with_http_info(mod_id, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param str version_id: A version UUID or slug (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mod_id', 'version_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_version" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mod_id' is set
        if ('mod_id' not in local_var_params or
                local_var_params['mod_id'] is None):
            raise ApiValueError("Missing the required parameter `mod_id` when calling `delete_version`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if ('version_id' not in local_var_params or
                local_var_params['version_id'] is None):
            raise ApiValueError("Missing the required parameter `version_id` when calling `delete_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mod_id' in local_var_params:
            path_params['mod_id'] = local_var_params['mod_id']  # noqa: E501
        if 'version_id' in local_var_params:
            path_params['version_id'] = local_var_params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mods/{mod_id}/versions/{version_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_version_from_build(self, mod_id, version_id, params, **kwargs):  # noqa: E501
        """Unlink a build from a version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_version_from_build(mod_id, version_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param str version_id: A version UUID or slug (required)
        :param VersionBuildParams params: The build data to unlink from version (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_version_from_build_with_http_info(mod_id, version_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_version_from_build_with_http_info(mod_id, version_id, params, **kwargs)  # noqa: E501
            return data

    def delete_version_from_build_with_http_info(self, mod_id, version_id, params, **kwargs):  # noqa: E501
        """Unlink a build from a version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_version_from_build_with_http_info(mod_id, version_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param str version_id: A version UUID or slug (required)
        :param VersionBuildParams params: The build data to unlink from version (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mod_id', 'version_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_version_from_build" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mod_id' is set
        if ('mod_id' not in local_var_params or
                local_var_params['mod_id'] is None):
            raise ApiValueError("Missing the required parameter `mod_id` when calling `delete_version_from_build`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if ('version_id' not in local_var_params or
                local_var_params['version_id'] is None):
            raise ApiValueError("Missing the required parameter `version_id` when calling `delete_version_from_build`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `delete_version_from_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mod_id' in local_var_params:
            path_params['mod_id'] = local_var_params['mod_id']  # noqa: E501
        if 'version_id' in local_var_params:
            path_params['version_id'] = local_var_params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mods/{mod_id}/versions/{version_id}/builds', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_mod_teams(self, mod_id, **kwargs):  # noqa: E501
        """Fetch all teams assigned to mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_mod_teams(mod_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :return: list[TeamMod]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_mod_teams_with_http_info(mod_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_mod_teams_with_http_info(mod_id, **kwargs)  # noqa: E501
            return data

    def list_mod_teams_with_http_info(self, mod_id, **kwargs):  # noqa: E501
        """Fetch all teams assigned to mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_mod_teams_with_http_info(mod_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :return: list[TeamMod]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mod_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_mod_teams" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mod_id' is set
        if ('mod_id' not in local_var_params or
                local_var_params['mod_id'] is None):
            raise ApiValueError("Missing the required parameter `mod_id` when calling `list_mod_teams`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mod_id' in local_var_params:
            path_params['mod_id'] = local_var_params['mod_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mods/{mod_id}/teams', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TeamMod]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_mod_users(self, mod_id, **kwargs):  # noqa: E501
        """Fetch all users assigned to mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_mod_users(mod_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :return: list[UserMod]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_mod_users_with_http_info(mod_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_mod_users_with_http_info(mod_id, **kwargs)  # noqa: E501
            return data

    def list_mod_users_with_http_info(self, mod_id, **kwargs):  # noqa: E501
        """Fetch all users assigned to mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_mod_users_with_http_info(mod_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :return: list[UserMod]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mod_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_mod_users" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mod_id' is set
        if ('mod_id' not in local_var_params or
                local_var_params['mod_id'] is None):
            raise ApiValueError("Missing the required parameter `mod_id` when calling `list_mod_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mod_id' in local_var_params:
            path_params['mod_id'] = local_var_params['mod_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mods/{mod_id}/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserMod]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_mods(self, **kwargs):  # noqa: E501
        """Fetch all available mods  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_mods(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Mod]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_mods_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_mods_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_mods_with_http_info(self, **kwargs):  # noqa: E501
        """Fetch all available mods  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_mods_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Mod]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_mods" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mods', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Mod]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_version_builds(self, mod_id, version_id, **kwargs):  # noqa: E501
        """Fetch all builds assigned to version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_version_builds(mod_id, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param str version_id: A version UUID or slug (required)
        :return: list[BuildVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_version_builds_with_http_info(mod_id, version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_version_builds_with_http_info(mod_id, version_id, **kwargs)  # noqa: E501
            return data

    def list_version_builds_with_http_info(self, mod_id, version_id, **kwargs):  # noqa: E501
        """Fetch all builds assigned to version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_version_builds_with_http_info(mod_id, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param str version_id: A version UUID or slug (required)
        :return: list[BuildVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mod_id', 'version_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_version_builds" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mod_id' is set
        if ('mod_id' not in local_var_params or
                local_var_params['mod_id'] is None):
            raise ApiValueError("Missing the required parameter `mod_id` when calling `list_version_builds`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if ('version_id' not in local_var_params or
                local_var_params['version_id'] is None):
            raise ApiValueError("Missing the required parameter `version_id` when calling `list_version_builds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mod_id' in local_var_params:
            path_params['mod_id'] = local_var_params['mod_id']  # noqa: E501
        if 'version_id' in local_var_params:
            path_params['version_id'] = local_var_params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mods/{mod_id}/versions/{version_id}/builds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BuildVersion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_versions(self, mod_id, **kwargs):  # noqa: E501
        """Fetch all available versions for a mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_versions(mod_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :return: list[Version]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_versions_with_http_info(mod_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_versions_with_http_info(mod_id, **kwargs)  # noqa: E501
            return data

    def list_versions_with_http_info(self, mod_id, **kwargs):  # noqa: E501
        """Fetch all available versions for a mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_versions_with_http_info(mod_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :return: list[Version]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mod_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_versions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mod_id' is set
        if ('mod_id' not in local_var_params or
                local_var_params['mod_id'] is None):
            raise ApiValueError("Missing the required parameter `mod_id` when calling `list_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mod_id' in local_var_params:
            path_params['mod_id'] = local_var_params['mod_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mods/{mod_id}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Version]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def permit_mod_team(self, mod_id, params, **kwargs):  # noqa: E501
        """Update team perms for mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.permit_mod_team(mod_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param ModTeamParams params: The mod team data to update (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.permit_mod_team_with_http_info(mod_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.permit_mod_team_with_http_info(mod_id, params, **kwargs)  # noqa: E501
            return data

    def permit_mod_team_with_http_info(self, mod_id, params, **kwargs):  # noqa: E501
        """Update team perms for mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.permit_mod_team_with_http_info(mod_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param ModTeamParams params: The mod team data to update (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mod_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method permit_mod_team" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mod_id' is set
        if ('mod_id' not in local_var_params or
                local_var_params['mod_id'] is None):
            raise ApiValueError("Missing the required parameter `mod_id` when calling `permit_mod_team`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `permit_mod_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mod_id' in local_var_params:
            path_params['mod_id'] = local_var_params['mod_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mods/{mod_id}/teams', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def permit_mod_user(self, mod_id, params, **kwargs):  # noqa: E501
        """Update user perms for mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.permit_mod_user(mod_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param ModUserParams params: The mod user data to update (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.permit_mod_user_with_http_info(mod_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.permit_mod_user_with_http_info(mod_id, params, **kwargs)  # noqa: E501
            return data

    def permit_mod_user_with_http_info(self, mod_id, params, **kwargs):  # noqa: E501
        """Update user perms for mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.permit_mod_user_with_http_info(mod_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param ModUserParams params: The mod user data to update (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mod_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method permit_mod_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mod_id' is set
        if ('mod_id' not in local_var_params or
                local_var_params['mod_id'] is None):
            raise ApiValueError("Missing the required parameter `mod_id` when calling `permit_mod_user`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `permit_mod_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mod_id' in local_var_params:
            path_params['mod_id'] = local_var_params['mod_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mods/{mod_id}/users', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_mod(self, mod_id, **kwargs):  # noqa: E501
        """Fetch a specific mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_mod(mod_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :return: Mod
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_mod_with_http_info(mod_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_mod_with_http_info(mod_id, **kwargs)  # noqa: E501
            return data

    def show_mod_with_http_info(self, mod_id, **kwargs):  # noqa: E501
        """Fetch a specific mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_mod_with_http_info(mod_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :return: Mod
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mod_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_mod" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mod_id' is set
        if ('mod_id' not in local_var_params or
                local_var_params['mod_id'] is None):
            raise ApiValueError("Missing the required parameter `mod_id` when calling `show_mod`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mod_id' in local_var_params:
            path_params['mod_id'] = local_var_params['mod_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mods/{mod_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mod',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_version(self, mod_id, version_id, **kwargs):  # noqa: E501
        """Fetch a specific version for a mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_version(mod_id, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param str version_id: A version UUID or slug (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_version_with_http_info(mod_id, version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_version_with_http_info(mod_id, version_id, **kwargs)  # noqa: E501
            return data

    def show_version_with_http_info(self, mod_id, version_id, **kwargs):  # noqa: E501
        """Fetch a specific version for a mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_version_with_http_info(mod_id, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param str version_id: A version UUID or slug (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mod_id', 'version_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_version" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mod_id' is set
        if ('mod_id' not in local_var_params or
                local_var_params['mod_id'] is None):
            raise ApiValueError("Missing the required parameter `mod_id` when calling `show_version`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if ('version_id' not in local_var_params or
                local_var_params['version_id'] is None):
            raise ApiValueError("Missing the required parameter `version_id` when calling `show_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mod_id' in local_var_params:
            path_params['mod_id'] = local_var_params['mod_id']  # noqa: E501
        if 'version_id' in local_var_params:
            path_params['version_id'] = local_var_params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mods/{mod_id}/versions/{version_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Version',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_mod(self, mod_id, params, **kwargs):  # noqa: E501
        """Update a specific mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_mod(mod_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param Mod params: The mod data to update (required)
        :return: Mod
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_mod_with_http_info(mod_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.update_mod_with_http_info(mod_id, params, **kwargs)  # noqa: E501
            return data

    def update_mod_with_http_info(self, mod_id, params, **kwargs):  # noqa: E501
        """Update a specific mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_mod_with_http_info(mod_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param Mod params: The mod data to update (required)
        :return: Mod
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mod_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_mod" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mod_id' is set
        if ('mod_id' not in local_var_params or
                local_var_params['mod_id'] is None):
            raise ApiValueError("Missing the required parameter `mod_id` when calling `update_mod`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `update_mod`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mod_id' in local_var_params:
            path_params['mod_id'] = local_var_params['mod_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mods/{mod_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mod',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_version(self, mod_id, version_id, params, **kwargs):  # noqa: E501
        """Update a specific version for a mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_version(mod_id, version_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param str version_id: A version UUID or slug (required)
        :param Version params: The version data to update (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_version_with_http_info(mod_id, version_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.update_version_with_http_info(mod_id, version_id, params, **kwargs)  # noqa: E501
            return data

    def update_version_with_http_info(self, mod_id, version_id, params, **kwargs):  # noqa: E501
        """Update a specific version for a mod  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_version_with_http_info(mod_id, version_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mod_id: A mod UUID or slug (required)
        :param str version_id: A version UUID or slug (required)
        :param Version params: The version data to update (required)
        :return: Version
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['mod_id', 'version_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_version" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mod_id' is set
        if ('mod_id' not in local_var_params or
                local_var_params['mod_id'] is None):
            raise ApiValueError("Missing the required parameter `mod_id` when calling `update_version`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if ('version_id' not in local_var_params or
                local_var_params['version_id'] is None):
            raise ApiValueError("Missing the required parameter `version_id` when calling `update_version`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `update_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mod_id' in local_var_params:
            path_params['mod_id'] = local_var_params['mod_id']  # noqa: E501
        if 'version_id' in local_var_params:
            path_params['version_id'] = local_var_params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mods/{mod_id}/versions/{version_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Version',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

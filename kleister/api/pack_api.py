# coding: utf-8

"""
    Kleister OpenAPI

    API definition for Kleister, manage mod packs for Minecraft  # noqa: E501

    The version of the OpenAPI document: 1.0.0-alpha1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from kleister.api_client import ApiClient
from kleister.exceptions import (
    ApiTypeError,
    ApiValueError
)


class PackApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def append_build_to_version(self, pack_id, build_id, params, **kwargs):  # noqa: E501
        """Assign a version to a build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.append_build_to_version(pack_id, build_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param str build_id: A build UUID or slug (required)
        :param BuildVersionParams params: The version data to append to build (required)
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.append_build_to_version_with_http_info(pack_id, build_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.append_build_to_version_with_http_info(pack_id, build_id, params, **kwargs)  # noqa: E501
            return data

    def append_build_to_version_with_http_info(self, pack_id, build_id, params, **kwargs):  # noqa: E501
        """Assign a version to a build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.append_build_to_version_with_http_info(pack_id, build_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param str build_id: A build UUID or slug (required)
        :param BuildVersionParams params: The version data to append to build (required)
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pack_id', 'build_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method append_build_to_version" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pack_id' is set
        if ('pack_id' not in local_var_params or
                local_var_params['pack_id'] is None):
            raise ApiValueError("Missing the required parameter `pack_id` when calling `append_build_to_version`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if ('build_id' not in local_var_params or
                local_var_params['build_id'] is None):
            raise ApiValueError("Missing the required parameter `build_id` when calling `append_build_to_version`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `append_build_to_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pack_id' in local_var_params:
            path_params['pack_id'] = local_var_params['pack_id']  # noqa: E501
        if 'build_id' in local_var_params:
            path_params['build_id'] = local_var_params['build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packs/{pack_id}/builds/{build_id}/versions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GeneralError',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def append_pack_to_team(self, pack_id, params, **kwargs):  # noqa: E501
        """Assign a team to pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.append_pack_to_team(pack_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param PackTeamParams params: The pack team data to assign (required)
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.append_pack_to_team_with_http_info(pack_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.append_pack_to_team_with_http_info(pack_id, params, **kwargs)  # noqa: E501
            return data

    def append_pack_to_team_with_http_info(self, pack_id, params, **kwargs):  # noqa: E501
        """Assign a team to pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.append_pack_to_team_with_http_info(pack_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param PackTeamParams params: The pack team data to assign (required)
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pack_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method append_pack_to_team" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pack_id' is set
        if ('pack_id' not in local_var_params or
                local_var_params['pack_id'] is None):
            raise ApiValueError("Missing the required parameter `pack_id` when calling `append_pack_to_team`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `append_pack_to_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pack_id' in local_var_params:
            path_params['pack_id'] = local_var_params['pack_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packs/{pack_id}/teams', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GeneralError',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def append_pack_to_user(self, pack_id, params, **kwargs):  # noqa: E501
        """Assign a user to pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.append_pack_to_user(pack_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param PackUserParams params: The pack user data to assign (required)
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.append_pack_to_user_with_http_info(pack_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.append_pack_to_user_with_http_info(pack_id, params, **kwargs)  # noqa: E501
            return data

    def append_pack_to_user_with_http_info(self, pack_id, params, **kwargs):  # noqa: E501
        """Assign a user to pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.append_pack_to_user_with_http_info(pack_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param PackUserParams params: The pack user data to assign (required)
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pack_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method append_pack_to_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pack_id' is set
        if ('pack_id' not in local_var_params or
                local_var_params['pack_id'] is None):
            raise ApiValueError("Missing the required parameter `pack_id` when calling `append_pack_to_user`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `append_pack_to_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pack_id' in local_var_params:
            path_params['pack_id'] = local_var_params['pack_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packs/{pack_id}/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GeneralError',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_build(self, pack_id, params, **kwargs):  # noqa: E501
        """Create a new build for a pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_build(pack_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param Build params: The build data to create (required)
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_build_with_http_info(pack_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.create_build_with_http_info(pack_id, params, **kwargs)  # noqa: E501
            return data

    def create_build_with_http_info(self, pack_id, params, **kwargs):  # noqa: E501
        """Create a new build for a pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_build_with_http_info(pack_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param Build params: The build data to create (required)
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pack_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_build" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pack_id' is set
        if ('pack_id' not in local_var_params or
                local_var_params['pack_id'] is None):
            raise ApiValueError("Missing the required parameter `pack_id` when calling `create_build`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `create_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pack_id' in local_var_params:
            path_params['pack_id'] = local_var_params['pack_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packs/{pack_id}/builds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Build',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_pack(self, params, **kwargs):  # noqa: E501
        """Create a new pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_pack(params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Pack params: The pack data to create (required)
        :return: Pack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_pack_with_http_info(params, **kwargs)  # noqa: E501
        else:
            (data) = self.create_pack_with_http_info(params, **kwargs)  # noqa: E501
            return data

    def create_pack_with_http_info(self, params, **kwargs):  # noqa: E501
        """Create a new pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_pack_with_http_info(params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Pack params: The pack data to create (required)
        :return: Pack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pack" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `create_pack`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_build(self, pack_id, build_id, **kwargs):  # noqa: E501
        """Delete a specific build for a pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_build(pack_id, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param str build_id: A build UUID or slug (required)
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_build_with_http_info(pack_id, build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_build_with_http_info(pack_id, build_id, **kwargs)  # noqa: E501
            return data

    def delete_build_with_http_info(self, pack_id, build_id, **kwargs):  # noqa: E501
        """Delete a specific build for a pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_build_with_http_info(pack_id, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param str build_id: A build UUID or slug (required)
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pack_id', 'build_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_build" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pack_id' is set
        if ('pack_id' not in local_var_params or
                local_var_params['pack_id'] is None):
            raise ApiValueError("Missing the required parameter `pack_id` when calling `delete_build`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if ('build_id' not in local_var_params or
                local_var_params['build_id'] is None):
            raise ApiValueError("Missing the required parameter `build_id` when calling `delete_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pack_id' in local_var_params:
            path_params['pack_id'] = local_var_params['pack_id']  # noqa: E501
        if 'build_id' in local_var_params:
            path_params['build_id'] = local_var_params['build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packs/{pack_id}/builds/{build_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GeneralError',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_build_from_version(self, pack_id, build_id, params, **kwargs):  # noqa: E501
        """Unlink a version from a build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_build_from_version(pack_id, build_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param str build_id: A build UUID or slug (required)
        :param BuildVersionParams params: The version data to unlink from build (required)
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_build_from_version_with_http_info(pack_id, build_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_build_from_version_with_http_info(pack_id, build_id, params, **kwargs)  # noqa: E501
            return data

    def delete_build_from_version_with_http_info(self, pack_id, build_id, params, **kwargs):  # noqa: E501
        """Unlink a version from a build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_build_from_version_with_http_info(pack_id, build_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param str build_id: A build UUID or slug (required)
        :param BuildVersionParams params: The version data to unlink from build (required)
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pack_id', 'build_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_build_from_version" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pack_id' is set
        if ('pack_id' not in local_var_params or
                local_var_params['pack_id'] is None):
            raise ApiValueError("Missing the required parameter `pack_id` when calling `delete_build_from_version`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if ('build_id' not in local_var_params or
                local_var_params['build_id'] is None):
            raise ApiValueError("Missing the required parameter `build_id` when calling `delete_build_from_version`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `delete_build_from_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pack_id' in local_var_params:
            path_params['pack_id'] = local_var_params['pack_id']  # noqa: E501
        if 'build_id' in local_var_params:
            path_params['build_id'] = local_var_params['build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packs/{pack_id}/builds/{build_id}/versions', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GeneralError',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pack(self, pack_id, **kwargs):  # noqa: E501
        """Delete a specific pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pack(pack_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pack_with_http_info(pack_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pack_with_http_info(pack_id, **kwargs)  # noqa: E501
            return data

    def delete_pack_with_http_info(self, pack_id, **kwargs):  # noqa: E501
        """Delete a specific pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pack_with_http_info(pack_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pack_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pack" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pack_id' is set
        if ('pack_id' not in local_var_params or
                local_var_params['pack_id'] is None):
            raise ApiValueError("Missing the required parameter `pack_id` when calling `delete_pack`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pack_id' in local_var_params:
            path_params['pack_id'] = local_var_params['pack_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packs/{pack_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GeneralError',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pack_from_team(self, pack_id, params, **kwargs):  # noqa: E501
        """Remove a team from pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pack_from_team(pack_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param PackTeamParams params: The pack team data to delete (required)
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pack_from_team_with_http_info(pack_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pack_from_team_with_http_info(pack_id, params, **kwargs)  # noqa: E501
            return data

    def delete_pack_from_team_with_http_info(self, pack_id, params, **kwargs):  # noqa: E501
        """Remove a team from pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pack_from_team_with_http_info(pack_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param PackTeamParams params: The pack team data to delete (required)
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pack_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pack_from_team" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pack_id' is set
        if ('pack_id' not in local_var_params or
                local_var_params['pack_id'] is None):
            raise ApiValueError("Missing the required parameter `pack_id` when calling `delete_pack_from_team`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `delete_pack_from_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pack_id' in local_var_params:
            path_params['pack_id'] = local_var_params['pack_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packs/{pack_id}/teams', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GeneralError',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pack_from_user(self, pack_id, params, **kwargs):  # noqa: E501
        """Remove a user from pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pack_from_user(pack_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param PackUserParams params: The pack user data to delete (required)
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pack_from_user_with_http_info(pack_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pack_from_user_with_http_info(pack_id, params, **kwargs)  # noqa: E501
            return data

    def delete_pack_from_user_with_http_info(self, pack_id, params, **kwargs):  # noqa: E501
        """Remove a user from pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pack_from_user_with_http_info(pack_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param PackUserParams params: The pack user data to delete (required)
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pack_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pack_from_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pack_id' is set
        if ('pack_id' not in local_var_params or
                local_var_params['pack_id'] is None):
            raise ApiValueError("Missing the required parameter `pack_id` when calling `delete_pack_from_user`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `delete_pack_from_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pack_id' in local_var_params:
            path_params['pack_id'] = local_var_params['pack_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packs/{pack_id}/users', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GeneralError',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_build_versions(self, pack_id, build_id, **kwargs):  # noqa: E501
        """Fetch all versions assigned to build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_build_versions(pack_id, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param str build_id: A build UUID or slug (required)
        :return: list[BuildVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_build_versions_with_http_info(pack_id, build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_build_versions_with_http_info(pack_id, build_id, **kwargs)  # noqa: E501
            return data

    def list_build_versions_with_http_info(self, pack_id, build_id, **kwargs):  # noqa: E501
        """Fetch all versions assigned to build  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_build_versions_with_http_info(pack_id, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param str build_id: A build UUID or slug (required)
        :return: list[BuildVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pack_id', 'build_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_build_versions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pack_id' is set
        if ('pack_id' not in local_var_params or
                local_var_params['pack_id'] is None):
            raise ApiValueError("Missing the required parameter `pack_id` when calling `list_build_versions`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if ('build_id' not in local_var_params or
                local_var_params['build_id'] is None):
            raise ApiValueError("Missing the required parameter `build_id` when calling `list_build_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pack_id' in local_var_params:
            path_params['pack_id'] = local_var_params['pack_id']  # noqa: E501
        if 'build_id' in local_var_params:
            path_params['build_id'] = local_var_params['build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packs/{pack_id}/builds/{build_id}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BuildVersion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_builds(self, pack_id, **kwargs):  # noqa: E501
        """Fetch all available builds for a pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_builds(pack_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :return: list[Build]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_builds_with_http_info(pack_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_builds_with_http_info(pack_id, **kwargs)  # noqa: E501
            return data

    def list_builds_with_http_info(self, pack_id, **kwargs):  # noqa: E501
        """Fetch all available builds for a pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_builds_with_http_info(pack_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :return: list[Build]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pack_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_builds" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pack_id' is set
        if ('pack_id' not in local_var_params or
                local_var_params['pack_id'] is None):
            raise ApiValueError("Missing the required parameter `pack_id` when calling `list_builds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pack_id' in local_var_params:
            path_params['pack_id'] = local_var_params['pack_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packs/{pack_id}/builds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Build]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_pack_teams(self, pack_id, **kwargs):  # noqa: E501
        """Fetch all teams assigned to pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pack_teams(pack_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :return: list[TeamPack]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_pack_teams_with_http_info(pack_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_pack_teams_with_http_info(pack_id, **kwargs)  # noqa: E501
            return data

    def list_pack_teams_with_http_info(self, pack_id, **kwargs):  # noqa: E501
        """Fetch all teams assigned to pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pack_teams_with_http_info(pack_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :return: list[TeamPack]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pack_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pack_teams" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pack_id' is set
        if ('pack_id' not in local_var_params or
                local_var_params['pack_id'] is None):
            raise ApiValueError("Missing the required parameter `pack_id` when calling `list_pack_teams`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pack_id' in local_var_params:
            path_params['pack_id'] = local_var_params['pack_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packs/{pack_id}/teams', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TeamPack]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_pack_users(self, pack_id, **kwargs):  # noqa: E501
        """Fetch all users assigned to pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pack_users(pack_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :return: list[UserPack]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_pack_users_with_http_info(pack_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_pack_users_with_http_info(pack_id, **kwargs)  # noqa: E501
            return data

    def list_pack_users_with_http_info(self, pack_id, **kwargs):  # noqa: E501
        """Fetch all users assigned to pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pack_users_with_http_info(pack_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :return: list[UserPack]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pack_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pack_users" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pack_id' is set
        if ('pack_id' not in local_var_params or
                local_var_params['pack_id'] is None):
            raise ApiValueError("Missing the required parameter `pack_id` when calling `list_pack_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pack_id' in local_var_params:
            path_params['pack_id'] = local_var_params['pack_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packs/{pack_id}/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserPack]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_packs(self, **kwargs):  # noqa: E501
        """Fetch all available packs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_packs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Pack]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_packs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_packs_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_packs_with_http_info(self, **kwargs):  # noqa: E501
        """Fetch all available packs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_packs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Pack]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_packs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Pack]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def permit_pack_team(self, pack_id, params, **kwargs):  # noqa: E501
        """Update team perms for pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.permit_pack_team(pack_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param PackTeamParams params: The pack team data to update (required)
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.permit_pack_team_with_http_info(pack_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.permit_pack_team_with_http_info(pack_id, params, **kwargs)  # noqa: E501
            return data

    def permit_pack_team_with_http_info(self, pack_id, params, **kwargs):  # noqa: E501
        """Update team perms for pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.permit_pack_team_with_http_info(pack_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param PackTeamParams params: The pack team data to update (required)
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pack_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method permit_pack_team" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pack_id' is set
        if ('pack_id' not in local_var_params or
                local_var_params['pack_id'] is None):
            raise ApiValueError("Missing the required parameter `pack_id` when calling `permit_pack_team`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `permit_pack_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pack_id' in local_var_params:
            path_params['pack_id'] = local_var_params['pack_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packs/{pack_id}/teams', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GeneralError',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def permit_pack_user(self, pack_id, params, **kwargs):  # noqa: E501
        """Update user perms for pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.permit_pack_user(pack_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param PackUserParams params: The pack user data to update (required)
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.permit_pack_user_with_http_info(pack_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.permit_pack_user_with_http_info(pack_id, params, **kwargs)  # noqa: E501
            return data

    def permit_pack_user_with_http_info(self, pack_id, params, **kwargs):  # noqa: E501
        """Update user perms for pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.permit_pack_user_with_http_info(pack_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param PackUserParams params: The pack user data to update (required)
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pack_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method permit_pack_user" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pack_id' is set
        if ('pack_id' not in local_var_params or
                local_var_params['pack_id'] is None):
            raise ApiValueError("Missing the required parameter `pack_id` when calling `permit_pack_user`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `permit_pack_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pack_id' in local_var_params:
            path_params['pack_id'] = local_var_params['pack_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packs/{pack_id}/users', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GeneralError',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_build(self, pack_id, build_id, **kwargs):  # noqa: E501
        """Fetch a specific build for a pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_build(pack_id, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param str build_id: A build UUID or slug (required)
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_build_with_http_info(pack_id, build_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_build_with_http_info(pack_id, build_id, **kwargs)  # noqa: E501
            return data

    def show_build_with_http_info(self, pack_id, build_id, **kwargs):  # noqa: E501
        """Fetch a specific build for a pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_build_with_http_info(pack_id, build_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param str build_id: A build UUID or slug (required)
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pack_id', 'build_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_build" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pack_id' is set
        if ('pack_id' not in local_var_params or
                local_var_params['pack_id'] is None):
            raise ApiValueError("Missing the required parameter `pack_id` when calling `show_build`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if ('build_id' not in local_var_params or
                local_var_params['build_id'] is None):
            raise ApiValueError("Missing the required parameter `build_id` when calling `show_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pack_id' in local_var_params:
            path_params['pack_id'] = local_var_params['pack_id']  # noqa: E501
        if 'build_id' in local_var_params:
            path_params['build_id'] = local_var_params['build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packs/{pack_id}/builds/{build_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Build',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_pack(self, pack_id, **kwargs):  # noqa: E501
        """Fetch a specific pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_pack(pack_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :return: Pack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_pack_with_http_info(pack_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_pack_with_http_info(pack_id, **kwargs)  # noqa: E501
            return data

    def show_pack_with_http_info(self, pack_id, **kwargs):  # noqa: E501
        """Fetch a specific pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_pack_with_http_info(pack_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :return: Pack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pack_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_pack" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pack_id' is set
        if ('pack_id' not in local_var_params or
                local_var_params['pack_id'] is None):
            raise ApiValueError("Missing the required parameter `pack_id` when calling `show_pack`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pack_id' in local_var_params:
            path_params['pack_id'] = local_var_params['pack_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packs/{pack_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_build(self, pack_id, build_id, params, **kwargs):  # noqa: E501
        """Update a specific build for a pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_build(pack_id, build_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param str build_id: A build UUID or slug (required)
        :param Build params: The build data to update (required)
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_build_with_http_info(pack_id, build_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.update_build_with_http_info(pack_id, build_id, params, **kwargs)  # noqa: E501
            return data

    def update_build_with_http_info(self, pack_id, build_id, params, **kwargs):  # noqa: E501
        """Update a specific build for a pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_build_with_http_info(pack_id, build_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param str build_id: A build UUID or slug (required)
        :param Build params: The build data to update (required)
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pack_id', 'build_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_build" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pack_id' is set
        if ('pack_id' not in local_var_params or
                local_var_params['pack_id'] is None):
            raise ApiValueError("Missing the required parameter `pack_id` when calling `update_build`")  # noqa: E501
        # verify the required parameter 'build_id' is set
        if ('build_id' not in local_var_params or
                local_var_params['build_id'] is None):
            raise ApiValueError("Missing the required parameter `build_id` when calling `update_build`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `update_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pack_id' in local_var_params:
            path_params['pack_id'] = local_var_params['pack_id']  # noqa: E501
        if 'build_id' in local_var_params:
            path_params['build_id'] = local_var_params['build_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packs/{pack_id}/builds/{build_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Build',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_pack(self, pack_id, params, **kwargs):  # noqa: E501
        """Update a specific pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pack(pack_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param Pack params: The pack data to update (required)
        :return: Pack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_pack_with_http_info(pack_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.update_pack_with_http_info(pack_id, params, **kwargs)  # noqa: E501
            return data

    def update_pack_with_http_info(self, pack_id, params, **kwargs):  # noqa: E501
        """Update a specific pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pack_with_http_info(pack_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pack_id: A pack UUID or slug (required)
        :param Pack params: The pack data to update (required)
        :return: Pack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pack_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pack" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pack_id' is set
        if ('pack_id' not in local_var_params or
                local_var_params['pack_id'] is None):
            raise ApiValueError("Missing the required parameter `pack_id` when calling `update_pack`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `update_pack`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pack_id' in local_var_params:
            path_params['pack_id'] = local_var_params['pack_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/packs/{pack_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

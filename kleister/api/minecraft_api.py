# coding: utf-8

"""
    Kleister OpenAPI

    API definition for Kleister, manage mod packs for Minecraft  # noqa: E501

    The version of the OpenAPI document: 1.0.0-alpha1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from kleister.api_client import ApiClient
from kleister.exceptions import (
    ApiTypeError,
    ApiValueError
)


class MinecraftApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def append_minecraft_to_build(self, minecraft_id, params, **kwargs):  # noqa: E501
        """Assign a build to a Minecraft version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.append_minecraft_to_build(minecraft_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str minecraft_id: A minecraft UUID or slug (required)
        :param MinecraftBuildParams params: The build data to append (required)
        :return: list[Build]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.append_minecraft_to_build_with_http_info(minecraft_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.append_minecraft_to_build_with_http_info(minecraft_id, params, **kwargs)  # noqa: E501
            return data

    def append_minecraft_to_build_with_http_info(self, minecraft_id, params, **kwargs):  # noqa: E501
        """Assign a build to a Minecraft version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.append_minecraft_to_build_with_http_info(minecraft_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str minecraft_id: A minecraft UUID or slug (required)
        :param MinecraftBuildParams params: The build data to append (required)
        :return: list[Build]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['minecraft_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method append_minecraft_to_build" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'minecraft_id' is set
        if ('minecraft_id' not in local_var_params or
                local_var_params['minecraft_id'] is None):
            raise ApiValueError("Missing the required parameter `minecraft_id` when calling `append_minecraft_to_build`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `append_minecraft_to_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'minecraft_id' in local_var_params:
            path_params['minecraft_id'] = local_var_params['minecraft_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/minecraft/{minecraft_id}/builds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Build]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_minecraft_from_build(self, minecraft_id, params, **kwargs):  # noqa: E501
        """Unlink a build from a Minecraft version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_minecraft_from_build(minecraft_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str minecraft_id: A minecraft UUID or slug (required)
        :param MinecraftBuildParams params: The build data to unlink (required)
        :return: list[Build]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_minecraft_from_build_with_http_info(minecraft_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_minecraft_from_build_with_http_info(minecraft_id, params, **kwargs)  # noqa: E501
            return data

    def delete_minecraft_from_build_with_http_info(self, minecraft_id, params, **kwargs):  # noqa: E501
        """Unlink a build from a Minecraft version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_minecraft_from_build_with_http_info(minecraft_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str minecraft_id: A minecraft UUID or slug (required)
        :param MinecraftBuildParams params: The build data to unlink (required)
        :return: list[Build]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['minecraft_id', 'params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_minecraft_from_build" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'minecraft_id' is set
        if ('minecraft_id' not in local_var_params or
                local_var_params['minecraft_id'] is None):
            raise ApiValueError("Missing the required parameter `minecraft_id` when calling `delete_minecraft_from_build`")  # noqa: E501
        # verify the required parameter 'params' is set
        if ('params' not in local_var_params or
                local_var_params['params'] is None):
            raise ApiValueError("Missing the required parameter `params` when calling `delete_minecraft_from_build`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'minecraft_id' in local_var_params:
            path_params['minecraft_id'] = local_var_params['minecraft_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'params' in local_var_params:
            body_params = local_var_params['params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/minecraft/{minecraft_id}/builds', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Build]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_minecraft_builds(self, minecraft_id, **kwargs):  # noqa: E501
        """Fetch the builds assigned to a Minecraft version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_minecraft_builds(minecraft_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str minecraft_id: A minecraft UUID or slug (required)
        :return: list[Build]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_minecraft_builds_with_http_info(minecraft_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_minecraft_builds_with_http_info(minecraft_id, **kwargs)  # noqa: E501
            return data

    def list_minecraft_builds_with_http_info(self, minecraft_id, **kwargs):  # noqa: E501
        """Fetch the builds assigned to a Minecraft version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_minecraft_builds_with_http_info(minecraft_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str minecraft_id: A minecraft UUID or slug (required)
        :return: list[Build]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['minecraft_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_minecraft_builds" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'minecraft_id' is set
        if ('minecraft_id' not in local_var_params or
                local_var_params['minecraft_id'] is None):
            raise ApiValueError("Missing the required parameter `minecraft_id` when calling `list_minecraft_builds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'minecraft_id' in local_var_params:
            path_params['minecraft_id'] = local_var_params['minecraft_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/minecraft/{minecraft_id}/builds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Build]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_minecrafts(self, **kwargs):  # noqa: E501
        """Fetch the available Minecraft versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_minecrafts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Minecraft]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_minecrafts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_minecrafts_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_minecrafts_with_http_info(self, **kwargs):  # noqa: E501
        """Fetch the available Minecraft versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_minecrafts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Minecraft]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_minecrafts" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/minecraft', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Minecraft]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_minecrafts(self, minecraft_id, **kwargs):  # noqa: E501
        """Search for available Minecraft versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_minecrafts(minecraft_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str minecraft_id: A search token to search Minecraft versions (required)
        :return: list[Minecraft]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_minecrafts_with_http_info(minecraft_id, **kwargs)  # noqa: E501
        else:
            (data) = self.search_minecrafts_with_http_info(minecraft_id, **kwargs)  # noqa: E501
            return data

    def search_minecrafts_with_http_info(self, minecraft_id, **kwargs):  # noqa: E501
        """Search for available Minecraft versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_minecrafts_with_http_info(minecraft_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str minecraft_id: A search token to search Minecraft versions (required)
        :return: list[Minecraft]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['minecraft_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_minecrafts" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'minecraft_id' is set
        if ('minecraft_id' not in local_var_params or
                local_var_params['minecraft_id'] is None):
            raise ApiValueError("Missing the required parameter `minecraft_id` when calling `search_minecrafts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'minecraft_id' in local_var_params:
            path_params['minecraft_id'] = local_var_params['minecraft_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/minecraft/{minecraft_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Minecraft]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_minecraft(self, **kwargs):  # noqa: E501
        """Update the available Minecraft versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_minecraft(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_minecraft_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_minecraft_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_minecraft_with_http_info(self, **kwargs):  # noqa: E501
        """Update the available Minecraft versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_minecraft_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GeneralError
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_minecraft" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/minecraft', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GeneralError',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

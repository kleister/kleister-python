# coding: utf-8

"""
    Kleister OpenAPI

    API definition for Kleister, manage mod packs for Minecraft  # noqa: E501

    The version of the OpenAPI document: 1.0.0-alpha1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Mod(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'slug': 'str',
        'name': 'str',
        'side': 'str',
        'description': 'str',
        'author': 'str',
        'website': 'str',
        'donate': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'slug': 'slug',
        'name': 'name',
        'side': 'side',
        'description': 'description',
        'author': 'author',
        'website': 'website',
        'donate': 'donate',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, slug=None, name=None, side=None, description=None, author=None, website=None, donate=None, created_at=None, updated_at=None):  # noqa: E501
        """Mod - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._slug = None
        self._name = None
        self._side = None
        self._description = None
        self._author = None
        self._website = None
        self._donate = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if slug is not None:
            self.slug = slug
        self.name = name
        if side is not None:
            self.side = side
        if description is not None:
            self.description = description
        if author is not None:
            self.author = author
        if website is not None:
            self.website = website
        if donate is not None:
            self.donate = donate
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Mod.  # noqa: E501


        :return: The id of this Mod.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Mod.


        :param id: The id of this Mod.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def slug(self):
        """Gets the slug of this Mod.  # noqa: E501


        :return: The slug of this Mod.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Mod.


        :param slug: The slug of this Mod.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def name(self):
        """Gets the name of this Mod.  # noqa: E501


        :return: The name of this Mod.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Mod.


        :param name: The name of this Mod.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def side(self):
        """Gets the side of this Mod.  # noqa: E501


        :return: The side of this Mod.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this Mod.


        :param side: The side of this Mod.  # noqa: E501
        :type: str
        """

        self._side = side

    @property
    def description(self):
        """Gets the description of this Mod.  # noqa: E501


        :return: The description of this Mod.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Mod.


        :param description: The description of this Mod.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def author(self):
        """Gets the author of this Mod.  # noqa: E501


        :return: The author of this Mod.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Mod.


        :param author: The author of this Mod.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def website(self):
        """Gets the website of this Mod.  # noqa: E501


        :return: The website of this Mod.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Mod.


        :param website: The website of this Mod.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def donate(self):
        """Gets the donate of this Mod.  # noqa: E501


        :return: The donate of this Mod.  # noqa: E501
        :rtype: str
        """
        return self._donate

    @donate.setter
    def donate(self, donate):
        """Sets the donate of this Mod.


        :param donate: The donate of this Mod.  # noqa: E501
        :type: str
        """

        self._donate = donate

    @property
    def created_at(self):
        """Gets the created_at of this Mod.  # noqa: E501


        :return: The created_at of this Mod.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Mod.


        :param created_at: The created_at of this Mod.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Mod.  # noqa: E501


        :return: The updated_at of this Mod.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Mod.


        :param updated_at: The updated_at of this Mod.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Mod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

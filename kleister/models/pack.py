# coding: utf-8

"""
    Kleister OpenAPI

    API definition for Kleister, manage mod packs for Minecraft  # noqa: E501

    The version of the OpenAPI document: 1.0.0-alpha1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Pack(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'recommended_id': 'str',
        'latest_id': 'str',
        'slug': 'str',
        'name': 'str',
        'website': 'str',
        'published': 'bool',
        'hidden': 'bool',
        'private': 'bool',
        'public': 'bool',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'recommended_id': 'recommended_id',
        'latest_id': 'latest_id',
        'slug': 'slug',
        'name': 'name',
        'website': 'website',
        'published': 'published',
        'hidden': 'hidden',
        'private': 'private',
        'public': 'public',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, recommended_id=None, latest_id=None, slug=None, name=None, website=None, published=None, hidden=None, private=None, public=None, created_at=None, updated_at=None):  # noqa: E501
        """Pack - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._recommended_id = None
        self._latest_id = None
        self._slug = None
        self._name = None
        self._website = None
        self._published = None
        self._hidden = None
        self._private = None
        self._public = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if recommended_id is not None:
            self.recommended_id = recommended_id
        if latest_id is not None:
            self.latest_id = latest_id
        if slug is not None:
            self.slug = slug
        self.name = name
        if website is not None:
            self.website = website
        if published is not None:
            self.published = published
        if hidden is not None:
            self.hidden = hidden
        if private is not None:
            self.private = private
        if public is not None:
            self.public = public
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Pack.  # noqa: E501


        :return: The id of this Pack.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Pack.


        :param id: The id of this Pack.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def recommended_id(self):
        """Gets the recommended_id of this Pack.  # noqa: E501


        :return: The recommended_id of this Pack.  # noqa: E501
        :rtype: str
        """
        return self._recommended_id

    @recommended_id.setter
    def recommended_id(self, recommended_id):
        """Sets the recommended_id of this Pack.


        :param recommended_id: The recommended_id of this Pack.  # noqa: E501
        :type: str
        """

        self._recommended_id = recommended_id

    @property
    def latest_id(self):
        """Gets the latest_id of this Pack.  # noqa: E501


        :return: The latest_id of this Pack.  # noqa: E501
        :rtype: str
        """
        return self._latest_id

    @latest_id.setter
    def latest_id(self, latest_id):
        """Sets the latest_id of this Pack.


        :param latest_id: The latest_id of this Pack.  # noqa: E501
        :type: str
        """

        self._latest_id = latest_id

    @property
    def slug(self):
        """Gets the slug of this Pack.  # noqa: E501


        :return: The slug of this Pack.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Pack.


        :param slug: The slug of this Pack.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def name(self):
        """Gets the name of this Pack.  # noqa: E501


        :return: The name of this Pack.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Pack.


        :param name: The name of this Pack.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def website(self):
        """Gets the website of this Pack.  # noqa: E501


        :return: The website of this Pack.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Pack.


        :param website: The website of this Pack.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def published(self):
        """Gets the published of this Pack.  # noqa: E501


        :return: The published of this Pack.  # noqa: E501
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Pack.


        :param published: The published of this Pack.  # noqa: E501
        :type: bool
        """

        self._published = published

    @property
    def hidden(self):
        """Gets the hidden of this Pack.  # noqa: E501


        :return: The hidden of this Pack.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Pack.


        :param hidden: The hidden of this Pack.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def private(self):
        """Gets the private of this Pack.  # noqa: E501


        :return: The private of this Pack.  # noqa: E501
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this Pack.


        :param private: The private of this Pack.  # noqa: E501
        :type: bool
        """

        self._private = private

    @property
    def public(self):
        """Gets the public of this Pack.  # noqa: E501


        :return: The public of this Pack.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Pack.


        :param public: The public of this Pack.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def created_at(self):
        """Gets the created_at of this Pack.  # noqa: E501


        :return: The created_at of this Pack.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Pack.


        :param created_at: The created_at of this Pack.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Pack.  # noqa: E501


        :return: The updated_at of this Pack.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Pack.


        :param updated_at: The updated_at of this Pack.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pack):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

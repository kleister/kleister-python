# coding: utf-8

"""
    Kleister OpenAPI

    API definition for Kleister, manage mod packs for Minecraft

    The version of the OpenAPI document: 1.0.0-alpha1
    Contact: kleister@webhippie.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kleister.models.mod_users import ModUsers

class TestModUsers(unittest.TestCase):
    """ModUsers unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ModUsers:
        """Test ModUsers
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ModUsers`
        """
        model = ModUsers()
        if include_optional:
            return ModUsers(
                mod = kleister.models.mod.Mod(
                    id = '', 
                    slug = '', 
                    name = '', 
                    side = 'both', 
                    description = '', 
                    author = '', 
                    website = '', 
                    donate = '', 
                    public = True, 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                total = 56,
                users = [
                    kleister.models.user_mod.User Mod(
                        user_id = '', 
                        user = kleister.models.user.User(
                            id = '', 
                            username = '', 
                            password = '', 
                            email = '', 
                            fullname = '', 
                            profile = '', 
                            admin = True, 
                            active = True, 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            auths = [
                                kleister.models.user_auth.User Auth(
                                    provider = '', 
                                    ref = '', 
                                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], ), 
                        mod_id = '', 
                        mod = kleister.models.mod.Mod(
                            id = '', 
                            slug = '', 
                            name = '', 
                            side = 'both', 
                            description = '', 
                            author = '', 
                            website = '', 
                            donate = '', 
                            public = True, 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        perm = 'user', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ]
            )
        else:
            return ModUsers(
        )
        """

    def testModUsers(self):
        """Test ModUsers"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

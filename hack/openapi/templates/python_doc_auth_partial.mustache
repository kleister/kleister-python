
configuration = {{{packageName}}}.Configuration(
    host = "{{{basePath}}}"
)

{{#hasAuthMethods}}
# The client must configure the authentication and authorization parameters
# in accordance with the API server security policy.
# Examples for each auth method are provided below, use the example that
# satisfies your auth use case.
{{#authMethods}}
{{#isBasic}}
{{#isBasicBasic}}

# Configure HTTP basic authorization: {{{name}}}
configuration = {{{packageName}}}.Configuration(
    username = 'YOUR_USERNAME',
    password = 'YOUR_PASSWORD'
)
{{/isBasicBasic}}
{{#isBasicBearer}}

# Configure Bearer authorization{{#bearerFormat}} ({{{.}}}){{/bearerFormat}}: {{{name}}}
configuration = {{{packageName}}}.Configuration(
    access_token = 'YOUR_BEARER_TOKEN'
)
{{/isBasicBearer}}
{{#isHttpSignature}}

# Configure HTTP message signature: {{{name}}}
configuration = {{{packageName}}}.Configuration(
    host = "{{{basePath}}}",
    signing_info = {{{packageName}}}.signing.HttpSigningConfiguration(
        key_id = 'my-key-id',
        private_key_path = 'private_key.pem',
        private_key_passphrase = 'YOUR_PASSPHRASE',
        signing_scheme = {{{packageName}}}.signing.SCHEME_HS2019,
        signing_algorithm = {{{packageName}}}.signing.ALGORITHM_ECDSA_MODE_FIPS_186_3,
        hash_algorithm = {{{packageName}}}.signing.SCHEME_RSA_SHA256,
        signed_headers = [
            {{{packageName}}}.signing.HEADER_REQUEST_TARGET,
            {{{packageName}}}.signing.HEADER_CREATED,
            {{{packageName}}}.signing.HEADER_EXPIRES,
            {{{packageName}}}.signing.HEADER_HOST,
            {{{packageName}}}.signing.HEADER_DATE,
            {{{packageName}}}.signing.HEADER_DIGEST,
            'Content-Type',
            'Content-Length',
            'User-Agent'
        ],
        signature_max_validity = datetime.timedelta(minutes=5)
    )
)
{{/isHttpSignature}}
{{/isBasic}}
{{#isApiKey}}

# Configure API key authorization: {{{name}}}
configuration.api_key['{{{name}}}'] = 'YOUR_API_KEY'

# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed
# configuration.api_key_prefix['{{name}}'] = 'Bearer'
{{/isApiKey}}
{{#isOAuth}}

# Configure OAuth2 access token for authorization: {{{name}}}
configuration = {{{packageName}}}.Configuration(
    host = "{{{basePath}}}"
)
configuration.access_token = 'YOUR_ACCESS_TOKEN'
{{/isOAuth}}
{{/authMethods}}
{{/hasAuthMethods}}
